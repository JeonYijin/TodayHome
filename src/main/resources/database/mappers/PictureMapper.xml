<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.th.th1.picture.PictureDAO">
	
	

	
	<!-- 사진게시판 글쓰기 -->
	<insert id="setPicInsert" parameterType="PictureVO" useGeneratedKeys="true" keyProperty="post_id">
		insert into picture(post_id, memberNum, post_date, pyeongsu, housetype, style, area, hit, post_text)
		values(#{post_id}, #{memberNum}, now(), #{pyeongsu}, #{housetype}, #{style}, #{area}, 0, #{post_text});
	</insert>
	
	
	<!-- 글 수정하기 -->
	<update id="setPicUpdate" parameterType="PictureVO">
		update picture set post_date = now(), pyeongsu = #{pyeongsu}, housetype=#{housetype}, style=#{style}, area=#{area}, post_text=#{post_text} where post_id = #{post_id}
	</update>
	
	<!-- 글 삭제하기 -->
	
	<delete id="setPicDelete" parameterType="PictureVO">
		delete from picture where post_id=#{post_id}
	</delete>
  
  	<!-- 글쓴사람 가져오기 -->
  	<select id="getPicWriter"  resultType="MemberVO">
  		select M.nickname from 
			member M right join picture P
			on M.memberNum = P.MemberNum
		
  	</select>
  
  	<!-- 글 리스트 조회 -->
  	 <!-- 리스트에서 검색 -->
  	<select id="getPicList" resultMap="PicMemResult" parameterType="PictureVO">
  		select P.*, PF.*, M.nickname from
		picture P left join picturefile PF
		on P.post_id = PF.post_id
        inner join member M
        on P.memberNum = M.memberNum
        where
        	<choose>
        		<when test="kind == 'housetype'">housetype</when>
        		<when test="kind == 'area'">area</when>
        		<when test="kind == 'pyeongsu'">pyeongsu</when>
        		<otherwise>style</otherwise>
        	</choose>
        like concat('%', #{search}, '%')
        order by 
        	<choose>
        		<when test="order == 'best'">hit</when>
        		<when test="order == 'recent'">post_date</when>
        		<otherwise>memberNum</otherwise>
        	</choose>
        	desc
  	</select>
  	<resultMap type="PictureVO" id="PicMemResult">
  		<id column="post_id" property="post_id"/>
  		<result column="memberNum" property="memberNum"/>
  		<result column="post_date" property="post_date"/>
  		<result column="pyeongsu" property="pyeongsu"/>
  		<result column="housetype" property="housetype"/>
  		<result column="style" property="style"/>
  		<result column="area" property="area"/>
  		<result column="post_text" property="post_text"/>
  		<result column="hit" property="hit"/>
  		
  		<association property="memberVO" javaType="MemberVO">
  			<id column="memberNum" property="memberNum"/>
  			<result column="nickname" property="nickname"/>
  		</association>
  		<collection property="pictureFileVO" javaType="List" ofType="PictureFileVO">
  			<id column="picFilenum" property="picFilenum"/>
  			<result column="picFilename" property="picFilename"/>
  			<result column="picOriname" property="picOriname"/>
  			<result column="post_id" property="post_id"/>
  			<result column="idx" property="idx"/>
  		</collection>
  	</resultMap>
  
  	<!-- 글 상세조회 -->
  	
  	<select id="getPicOne" parameterType="PictureVO" resultMap="getPicResult">
  		select P.*, PF.*, M.nickname from
			picture P left join picturefile PF
			on P.post_id = PF.post_id
			inner join Member M
			on P.memberNum = M.memberNum
		where P.post_id = #{post_id}
  	</select>
  	<resultMap type="PictureVO" id="getPicResult">
  		<id column="post_id" property="post_id"/>
  		<result column="memberNum" property="memberNum"/>
  		<result column="post_date" property="post_date"/>
  		<result column="pyeongsu" property="pyeongsu"/>
  		<result column="housetype" property="housetype"/>
  		<result column="style" property="style"/>
  		<result column="area" property="area"/>
  		<result column="post_text" property="post_text"/>
  		<result column="hit" property="hit"/>
  		<association property="memberVO" javaType="MemberVO">
  			<id column="memberNum" property="memberNum"/>
  			<result column="nickname" property="nickname"/>
  		</association>
  		<collection property="pictureFileVO" javaType="List" ofType="PictureFileVO">
  			<id column="picFilenum" property="picFilenum"/>
  			<result column="picFilename" property="picFilename"/>
  			<result column="picOriname" property="picOriname"/>
  			<result column="post_id" property="post_id"/>
  			<result column="idx" property="idx"/>
  		</collection>
  		
  	</resultMap>
  
  	<!-- 글 조회수 업데이트 -->
  
  	<update id="setHitUpdate" parameterType="PictureVO">
  		update picture set hit = hit+1 where post_id = #{post_id}
  	</update>
  
 
  
  
  
  
  	<!-- 파일 인서트 -->
  	<insert id="setPicFileInsert" parameterType="PictureFileVO">
  		insert into picturefile(picFilenum, picFilename, picOriname,post_id, idx)
  		values(0, #{picFilename},#{picOriname},#{post_id} , #{idx})
  	</insert>
  	
  	<!-- 파일 가져오기 -->
  	<select id="getPicFile" parameterType="PictureVO" resultType="PictureFileVO">
  		select * from picturefile where post_id = #{post_id}
  	</select>
  	
  	<!-- 파일 삭제하기 -->
  	<delete id="setPicFileDelete" parameterType="PictureFileVO">
  		delete from picturefile where picFilenum = #{picFilenum}
  	</delete>
  	
  	
  	
  	
  	<!-- 댓글 인서트 -->
  	
  	<insert id="setCommentInsert" parameterType="PicCommentVO" useGeneratedKeys="true" keyProperty="comment_num">
  		insert into piccomment(comment_num, comment_text, memberNum, post_id, comment_date, ref, step, depth)
  		values(#{comment_num}, #{comment_text}, #{memberNum}, #{post_id}, now(), 0,0,0)
  	</insert>
  	
  	<!-- 댓글 수정 -->
  	<update id="setCommentUpdate" parameterType="PicCommentVO">
  		update piccomment set comment_text = #{comment_text}, comment_date=now()
  	</update>
  	
  	<!-- 댓글 삭제 -->
  	<delete id="setCommentDelete" parameterType="PicCommentVO">
  		delete from piccomment where comment_num = #{comment_num}
  	</delete>
  	
  	<!-- 댓글 조회 -->
  	<select id="getComment" parameterType="PicCommentVO" resultMap="getCommentResult">
  		select PC.*, M.nickname from
  		piccomment PC inner join member M
  		on PC.memberNum = M.memberNum
  		where post_id = #{post_id}
  	</select>
  	<resultMap type="PicCommentVO" id="getCommentResult">
  		<id column="comment_num" property="comment_num"/>
  		<result column="comment_text" property="comment_text"/>
  		<result column="memberNum" property="memberNum"/>
  		<result column="post_id" property="post_id"/>
  		<result column="comment_date" property="comment_date"/>
  		<result column="ref" property="ref"/>
  		<result column="step" property="step"/>
  		<result column="depth" property="depth"/>
  		
  		<collection property="memberVO" javaType="List" ofType="MemberVO">
  			<id column="memberNum" property="memberNum"/>
  			<result column="nickname" property="nickname"/>		
  		</collection>
  	</resultMap>
  	
  	
  	<!-- 댓글에 답댓글 달기 -->
  	<insert id="setReplyComment" parameterType="PicCommentVO" useGeneratedKeys="true" keyProperty="comment_num">
  		insert into piccomment(comment_num, comment_text, memberNum, post_id, comment_date, ref, step, depth)
  		values(0, #{comment_text}, #{memberNum}, #{post_id}, now(), 
	  		(select R.ref from (select * from piccomment where comment_num=#{comment_num}) R),
	  		(select S.step+1 from (select * from piccomment where comment_num=#{comment_num}) S),
	  		(select D.depth+1 from(select * from piccomment where comment_num=#{comment_num}) D)
  		)
  	</insert>
  	<!-- 답댓글 달기전에 ref, step 업데이트 -->
  	<update id="setReplyUpdate" parameterType="PicCommentVO">
		update piccomment set step=step+1 where 
		ref=(select R.ref from (select * from piccomment where comment_num=#{comment_num})R)
		and
		step > (select S.step from (select * from piccomment where comment_num=#{comment_num})S)
	</update>
  	<!-- 원댓글 쓸때 ref 업데이트해주기 -->
  	<update id="setRefUpdate" parameterType="PicCommentVO">
		update piccomment set ref =#{comment_num} where comment_num = #{comment_num}
	</update>
  	
  
  	<!-- 댓글 개수 가져오기 -->
  	<select id="getCommentCount" parameterType="PicCommentVO" resultType="PicCommentVO">
  		select count(*) count, post_id from piccomment where post_id=#{post_id}
  	</select>
  
  	
  	
  	
  	<!-- 하트 클릭시 insert -->
  	<insert id="setHeartInsert" parameterType="FeelingVO">
  		insert into feeling(heart, post_id, memberNum) values(0, #{post_id}, #{memberNum})
  	</insert>
  	
  	<!-- 꽉찬 하트 클릭시 delete -->
  	<delete id="setHeartDelete" parameterType="FeelingVO">
  		delete from feeling where post_id=#{post_id} and memberNum=#{memberNum}
  	</delete>
  	
  	
  	<!-- 로그인 한 사람이 하트 누른 게시글 가져오기 -->
  	<select id="getHeartPost" parameterType="FeelingVO" resultType="FeelingVO">
  		select post_id from feeling where memberNum = #{memberNum}
  	</select>
  	
  	
  	<!-- 게시글 당 하트 수 구하기 -->
  	<select id="getHeart" parameterType="FeelingVO" resultType="FeelingVO">
  		select count(*) count from feeling where post_id = #{post_id}
  	</select>
  	
  	
  	<!-- 스크랩 클릭시 insert -->
	<insert id="setScrapInsert" parameterType="ScrapingVO">
		insert into scraping(scrap, post_id, memberNum) values(0, #{post_id}, #{memberNum})
	</insert>  	
  	
  	<!-- 꽉찬 스크랩 클릭시 delete -->
  	<delete id="setScrapDelete" parameterType="ScrapingVO">
  		delete from scraping where post_id = #{post_id} and memberNum = #{memberNum}
  	</delete>
  	
  	<!-- 게시글 당 스크랩 개수 가져오기 -->
  	<select id="getScrap" parameterType="ScrapingVO" resultType="ScrapingVO">
  		select count(*) scrapCount from scraping where post_id = #{post_id}
  	</select>
  	
  </mapper>